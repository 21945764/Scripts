/**
 * 老头乐 仅支持单账号 每日签到 每日分享 
 * 变量名称：ltl 变量格式：手机号#密码
 * 需要安装 request
 */
var _0xodd = 'jsjiami.com.v6', _0xodd_ = ['_0xodd'], _0x35b1 = [_0xodd, '\u8001\u5934\u4e50', '\x72\x65\x71\x75\x65\x73\x74', '\x69\x73\x4e\x6f\x64\x65', '\x2e\x2f\x73\x65\x6e\x64\x4e\x6f\x74\x69\x66\x79', '\x65\x6e\x76', '\x6c\x74\x6c', '\x73\x70\x6c\x69\x74', '\x6c\x65\x6e\x67\x74\x68', '\x6c\x6f\x67', '\u73af\u5883\u53d8\u91cf\u683c\u5f0f\u4e0d\u6b63\u786e', '\x70\x68\x6f\x6e\x65', '\x70\x61\x73\x73\x77\x6f\x72\x64', '\x73\x65\x6e\x64\x4e\x6f\x74\x69\x66\x79', '\x6e\x61\x6d\x65', '\u8bf7\u586b\u5199\u73af\u5883\u53d8\u91cf\x20\u53d8\u91cf\u540d\u79f0\uff1a\x6c\x74\x6c\x20\u53d8\u91cf\u683c\u5f0f\uff1a\u624b\u673a\u53f7\x23\u5bc6\u7801', '\x50\x4f\x53\x54', '\x68\x74\x74\x70\x73\x3a\x2f\x2f\x77\x77\x77\x2e\x74\x74\x6c\x6a\x66\x2e\x63\x6f\x6d\x2f\x74\x74\x6c\x5f\x73\x69\x74\x65\x2f\x75\x73\x65\x72\x2e\x64\x6f', '\x54\x6f\x74\x6f\x6c\x65\x2f\x31\x2e\x34\x2e\x38\x20\x28\x69\x50\x68\x6f\x6e\x65\x3b\x20\x69\x4f\x53\x20\x31\x35\x2e\x30\x3b\x20\x53\x63\x61\x6c\x65\x2f\x33\x2e\x30\x30\x29', '\x61\x70\x70\x6c\x65', '\x69\x50\x68\x6f\x6e\x65\x31\x33\x25\x32\x43\x32', '\x31\x35\x2e\x30', '\x6c\x6f\x67\x69\x6e', '\x35\x36\x39\x61\x65\x61\x65\x66\x36\x64\x61\x37\x34\x37\x30\x61\x65\x33\x38\x65\x34\x39\x30\x37\x61\x61\x62\x39\x38\x30\x64\x61', '\x69\x6f\x73', '\x70\x61\x72\x73\x65', '\x62\x6f\x64\x79', '\x63\x6f\x64\x65', '\x30\x30\x30\x30', '\u624b\u673a\u53f7\x3a', '\x20\x20\u767b\u5f55\u6210\u529f\x20\x20', '\x20\x20\u5f53\u524d\u79ef\u5206\x3a', '\x75\x73\x65\x72', '\x69\x6e\x74\x65\x67\x72\x61\x6c', '\x6c\x6f\x67\x69\x6e\x54\x6f\x6b\x65\x6e', '\u8d26\u53f7\x3a', '\u767b\u5f55\u5931\u8d25\x20\x20', '\x6d\x73\x67', '\x50\x55\x54', '\x68\x74\x74\x70\x73\x3a\x2f\x2f\x77\x77\x77\x2e\x74\x74\x6c\x6a\x66\x2e\x63\x6f\x6d\x2f\x74\x74\x6c\x5f\x63\x68\x65\x66\x48\x75\x62\x2f\x75\x73\x65\x72\x2f\x61\x70\x69\x2f\x73\x69\x67\x6e\x2f\x74\x6f\x64\x61\x79', '\x20\x20\u7b7e\u5230\u6210\u529f', '\x20\x20\u7b7e\u5230\u5931\u8d25\x3a', '\x6d\x65\x73\x73\x61\x67\x65', '\x68\x74\x74\x70\x73\x3a\x2f\x2f\x77\x77\x77\x2e\x74\x74\x6c\x6a\x66\x2e\x63\x6f\x6d\x2f\x74\x74\x6c\x5f\x63\x68\x65\x66\x48\x75\x62\x2f\x43\x6f\x6d\x6d\x6f\x6e\x2f\x73\x68\x61\x72\x65\x2f\x41\x33\x35\x44\x35\x37\x35\x46\x2d\x43\x30\x30\x34\x2d\x34\x37\x31\x37\x2d\x41\x41\x42\x43\x2d\x45\x44\x39\x44\x31\x39\x37\x39\x43\x33\x46\x41\x2f\x62\x6c\x6f\x67', '\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x6a\x73\x6f\x6e', '\x73\x74\x72\x69\x6e\x67\x69\x66\x79', '\x41\x33\x35\x44\x35\x37\x35\x46\x2d\x43\x30\x30\x34\x2d\x34\x37\x31\x37\x2d\x41\x41\x42\x43\x2d\x45\x44\x39\x44\x31\x39\x37\x39\x43\x33\x46\x41', '\x62\x6c\x6f\x67', '\x20\x20\u5206\u4eab\u6210\u529f', '\x20\x20\u5206\u4eab\u5931\u8d25\x3a', '\x47\x45\x54', '\x68\x74\x74\x70\x73\x3a\x2f\x2f\x77\x77\x77\x2e\x74\x74\x6c\x6a\x66\x2e\x63\x6f\x6d\x2f\x74\x74\x6c\x5f\x63\x68\x65\x66\x48\x75\x62\x2f\x75\x73\x65\x72\x2f\x61\x70\x69\x2f\x6d\x79', '\x20\x20\u8fd0\u884c\u540e\u79ef\u5206\x3a', '\x64\x61\x74\x61', '\x20\x20\u83b7\u53d6\u79ef\u5206\u5931\u8d25\x3a', '\x65\x6a\x58\x49\x73\x6a\x65\x64\x51\x5a\x53\x49\x69\x72\x47\x61\x46\x6d\x6c\x4e\x69\x2e\x45\x46\x46\x63\x6f\x6d\x2e\x76\x36\x3d\x3d']; function _0x84b6 (_0xa44633, _0x4647ba) { _0xa44633 = ~~'0x'['concat'](_0xa44633['slice'](0x0)); var _0x2522ec = _0x35b1[_0xa44633]; return _0x2522ec; }; (function (_0x1672a8, _0x4e3956) { var _0x452c2e = 0x0; for (_0x4e3956 = _0x1672a8['shift'](_0x452c2e >> 0x2); _0x4e3956 && _0x4e3956 !== (_0x1672a8['pop'](_0x452c2e >> 0x3) + '')['replace'](/[eXIedQZSIrGFlNEFF=]/g, ''); _0x452c2e++) { _0x452c2e = _0x452c2e ^ 0xcd24b; } }(_0x35b1, _0x84b6)); const $ = new Env(_0x84b6('0')); var request = require(_0x84b6('1')); const notify = $[_0x84b6('2')]() ? require(_0x84b6('3')) : ''; var msg = ''; ltl = $[_0x84b6('2')]() ? process[_0x84b6('4')][_0x84b6('5')] : ''; ltlUser = { '\x70\x68\x6f\x6e\x65': '', '\x70\x61\x73\x73\x77\x6f\x72\x64': '' }; token = ''; main(); async function main () { if (ltl != '' && ltl != null) { let _0x129a78 = ltl[_0x84b6('6')]('\x23'); if (_0x129a78[_0x84b6('7')] != 0x2) { console[_0x84b6('8')](_0x84b6('9')); return; } ltlUser[_0x84b6('a')] = _0x129a78[0x0]; ltlUser[_0x84b6('b')] = _0x129a78[0x1]; await login(ltlUser[_0x84b6('a')], ltlUser[_0x84b6('b')]); await sleep(0x3e8); await signin(token); await sleep(0x3e8); await share(token); await sleep(0x3e8); await integral(token); await notify[_0x84b6('c')]($[_0x84b6('d')], msg, ''); } else { console[_0x84b6('8')](_0x84b6('e')); } } var sleep = _0x119a4b => new Promise(_0x341683 => setTimeout(_0x341683, _0x119a4b)); async function login (_0x9a77d9, _0x18cae5) { var _0x586b07 = { 'method': _0x84b6('f'), 'url': _0x84b6('10'), 'headers': { 'User-Agent': _0x84b6('11') }, '\x66\x6f\x72\x6d\x44\x61\x74\x61': { 'device_brand': _0x84b6('12'), 'device_model': _0x84b6('13'), 'device_version': _0x84b6('14'), 'mthd': _0x84b6('15'), 'password': _0x18cae5, 'sign': _0x84b6('16'), 'platform': _0x84b6('17'), 'username': _0x9a77d9 } }; await request(_0x586b07, function (_0x595a97, _0x1fd936) { var _0x2ce468 = JSON[_0x84b6('18')](_0x1fd936[_0x84b6('19')]); if (_0x2ce468[_0x84b6('1a')] == _0x84b6('1b')) { console[_0x84b6('8')](_0x84b6('1c') + _0x9a77d9 + _0x84b6('1d') + _0x84b6('1e') + _0x2ce468[_0x84b6('1f')][_0x84b6('20')]); msg += _0x84b6('1c') + _0x9a77d9 + _0x84b6('1d') + _0x84b6('1e') + _0x2ce468[_0x84b6('1f')][_0x84b6('20')]; token = _0x2ce468[_0x84b6('1f')][_0x84b6('21')]; } else { console[_0x84b6('8')](_0x84b6('22') + _0x9a77d9 + _0x84b6('23') + _0x2ce468[_0x84b6('24')]); msg += _0x84b6('22') + _0x9a77d9 + _0x84b6('23') + _0x2ce468[_0x84b6('24')]; notify[_0x84b6('c')]($[_0x84b6('d')], msg, ''); return; } }); } async function signin (_0x5a7768) { var _0x1633b3 = { 'method': _0x84b6('25'), 'url': _0x84b6('26'), 'headers': { 'token': _0x5a7768, 'User-Agent': _0x84b6('11') }, '\x66\x6f\x72\x6d': {} }; await request(_0x1633b3, function (_0x54846b, _0x513b3d) { var _0x1b0b7f = JSON[_0x84b6('18')](_0x513b3d[_0x84b6('19')]); if (_0x1b0b7f[_0x84b6('1a')] == '\x30') { console[_0x84b6('8')](_0x84b6('22') + ltlUser[_0x84b6('a')] + _0x84b6('27')); msg += _0x84b6('22') + ltlUser[_0x84b6('a')] + _0x84b6('27'); _0x5a7768 = _0x1b0b7f[_0x84b6('1f')][_0x84b6('21')]; } else { console[_0x84b6('8')](_0x84b6('22') + ltlUser[_0x84b6('a')] + _0x84b6('28') + _0x1b0b7f[_0x84b6('29')]); msg += _0x84b6('22') + ltlUser[_0x84b6('a')] + _0x84b6('28') + _0x1b0b7f[_0x84b6('29')]; } }); } async function share (_0xc1a515) { var _0x47b836 = { 'method': _0x84b6('25'), 'url': _0x84b6('2a'), 'headers': { 'token': _0xc1a515, 'Content-Type': _0x84b6('2b') }, '\x62\x6f\x64\x79': JSON[_0x84b6('2c')]({ 'id': _0x84b6('2d'), 'type': _0x84b6('2e') }) }; await request(_0x47b836, function (_0x58f659, _0x169cee) { var _0x4e5965 = JSON[_0x84b6('18')](_0x169cee[_0x84b6('19')]); if (_0x4e5965[_0x84b6('1a')] == '\x30') { console[_0x84b6('8')](_0x84b6('22') + ltlUser[_0x84b6('a')] + _0x84b6('2f')); msg += _0x84b6('22') + ltlUser[_0x84b6('a')] + _0x84b6('2f'); } else { console[_0x84b6('8')](_0x84b6('22') + ltlUser[_0x84b6('a')] + _0x84b6('30') + _0x4e5965[_0x84b6('29')]); msg += _0x84b6('22') + ltlUser[_0x84b6('a')] + _0x84b6('30') + _0x4e5965[_0x84b6('29')]; } }); } async function integral (_0x667497) { var _0x260fd6 = { 'method': _0x84b6('31'), 'url': _0x84b6('32'), 'headers': { 'token': _0x667497 } }; request(_0x260fd6, function (_0x13bbce, _0xf304e4) { var _0x334255 = JSON[_0x84b6('18')](_0xf304e4[_0x84b6('19')]); if (_0x334255[_0x84b6('1a')] == '\x30') { console[_0x84b6('8')](_0x84b6('22') + ltlUser[_0x84b6('a')] + _0x84b6('33') + _0x334255[_0x84b6('34')][_0x84b6('20')]); } else { console[_0x84b6('8')](_0x84b6('22') + ltlUser[_0x84b6('a')] + _0x84b6('35') + _0x334255[_0x84b6('29')]); msg += _0x84b6('22') + ltlUser[_0x84b6('a')] + _0x84b6('35') + _0x334255[_0x84b6('29')]; } }); }; _0xodd = 'jsjiami.com.v6';

// prettier-ignore
function Env (t, e) { "undefined" != typeof process && JSON.stringify(process.env).indexOf("GITHUB") > -1 && process.exit(0); class s { constructor(t) { this.env = t } send (t, e = "GET") { t = "string" == typeof t ? { url: t } : t; let s = this.get; return "POST" === e && (s = this.post), new Promise((e, i) => { s.call(this, t, (t, s, r) => { t ? i(t) : e(s) }) }) } get (t) { return this.send.call(this.env, t) } post (t) { return this.send.call(this.env, t, "POST") } } return new class { constructor(t, e) { this.name = t, this.http = new s(this), this.data = null, this.dataFile = "box.dat", this.logs = [], this.isMute = !1, this.isNeedRewrite = !1, this.logSeparator = "\n", this.startTime = (new Date).getTime(), Object.assign(this, e), this.log("", `🔔${this.name}, 开始!`) } isNode () { return "undefined" != typeof module && !!module.exports } isQuanX () { return "undefined" != typeof $task } isSurge () { return "undefined" != typeof $httpClient && "undefined" == typeof $loon } isLoon () { return "undefined" != typeof $loon } toObj (t, e = null) { try { return JSON.parse(t) } catch { return e } } toStr (t, e = null) { try { return JSON.stringify(t) } catch { return e } } getjson (t, e) { let s = e; const i = this.getdata(t); if (i) try { s = JSON.parse(this.getdata(t)) } catch { } return s } setjson (t, e) { try { return this.setdata(JSON.stringify(t), e) } catch { return !1 } } getScript (t) { return new Promise(e => { this.get({ url: t }, (t, s, i) => e(i)) }) } runScript (t, e) { return new Promise(s => { let i = this.getdata("@chavy_boxjs_userCfgs.httpapi"); i = i ? i.replace(/\n/g, "").trim() : i; let r = this.getdata("@chavy_boxjs_userCfgs.httpapi_timeout"); r = r ? 1 * r : 20, r = e && e.timeout ? e.timeout : r; const [o, h] = i.split("@"), n = { url: `http://${h}/v1/scripting/evaluate`, body: { script_text: t, mock_type: "cron", timeout: r }, headers: { "X-Key": o, Accept: "*/*" } }; this.post(n, (t, e, i) => s(i)) }).catch(t => this.logErr(t)) } loaddata () { if (!this.isNode()) return {}; { this.fs = this.fs ? this.fs : require("fs"), this.path = this.path ? this.path : require("path"); const t = this.path.resolve(this.dataFile), e = this.path.resolve(process.cwd(), this.dataFile), s = this.fs.existsSync(t), i = !s && this.fs.existsSync(e); if (!s && !i) return {}; { const i = s ? t : e; try { return JSON.parse(this.fs.readFileSync(i)) } catch (t) { return {} } } } } writedata () { if (this.isNode()) { this.fs = this.fs ? this.fs : require("fs"), this.path = this.path ? this.path : require("path"); const t = this.path.resolve(this.dataFile), e = this.path.resolve(process.cwd(), this.dataFile), s = this.fs.existsSync(t), i = !s && this.fs.existsSync(e), r = JSON.stringify(this.data); s ? this.fs.writeFileSync(t, r) : i ? this.fs.writeFileSync(e, r) : this.fs.writeFileSync(t, r) } } lodash_get (t, e, s) { const i = e.replace(/\[(\d+)\]/g, ".$1").split("."); let r = t; for (const t of i) if (r = Object(r)[t], void 0 === r) return s; return r } lodash_set (t, e, s) { return Object(t) !== t ? t : (Array.isArray(e) || (e = e.toString().match(/[^.[\]]+/g) || []), e.slice(0, -1).reduce((t, s, i) => Object(t[s]) === t[s] ? t[s] : t[s] = Math.abs(e[i + 1]) >> 0 == +e[i + 1] ? [] : {}, t)[e[e.length - 1]] = s, t) } getdata (t) { let e = this.getval(t); if (/^@/.test(t)) { const [, s, i] = /^@(.*?)\.(.*?)$/.exec(t), r = s ? this.getval(s) : ""; if (r) try { const t = JSON.parse(r); e = t ? this.lodash_get(t, i, "") : e } catch (t) { e = "" } } return e } setdata (t, e) { let s = !1; if (/^@/.test(e)) { const [, i, r] = /^@(.*?)\.(.*?)$/.exec(e), o = this.getval(i), h = i ? "null" === o ? null : o || "{}" : "{}"; try { const e = JSON.parse(h); this.lodash_set(e, r, t), s = this.setval(JSON.stringify(e), i) } catch (e) { const o = {}; this.lodash_set(o, r, t), s = this.setval(JSON.stringify(o), i) } } else s = this.setval(t, e); return s } getval (t) { return this.isSurge() || this.isLoon() ? $persistentStore.read(t) : this.isQuanX() ? $prefs.valueForKey(t) : this.isNode() ? (this.data = this.loaddata(), this.data[t]) : this.data && this.data[t] || null } setval (t, e) { return this.isSurge() || this.isLoon() ? $persistentStore.write(t, e) : this.isQuanX() ? $prefs.setValueForKey(t, e) : this.isNode() ? (this.data = this.loaddata(), this.data[e] = t, this.writedata(), !0) : this.data && this.data[e] || null } initGotEnv (t) { this.got = this.got ? this.got : require("got"), this.cktough = this.cktough ? this.cktough : require("tough-cookie"), this.ckjar = this.ckjar ? this.ckjar : new this.cktough.CookieJar, t && (t.headers = t.headers ? t.headers : {}, void 0 === t.headers.Cookie && void 0 === t.cookieJar && (t.cookieJar = this.ckjar)) } get (t, e = (() => { })) { t.headers && (delete t.headers["Content-Type"], delete t.headers["Content-Length"]), this.isSurge() || this.isLoon() ? (this.isSurge() && this.isNeedRewrite && (t.headers = t.headers || {}, Object.assign(t.headers, { "X-Surge-Skip-Scripting": !1 })), $httpClient.get(t, (t, s, i) => { !t && s && (s.body = i, s.statusCode = s.status), e(t, s, i) })) : this.isQuanX() ? (this.isNeedRewrite && (t.opts = t.opts || {}, Object.assign(t.opts, { hints: !1 })), $task.fetch(t).then(t => { const { statusCode: s, statusCode: i, headers: r, body: o } = t; e(null, { status: s, statusCode: i, headers: r, body: o }, o) }, t => e(t))) : this.isNode() && (this.initGotEnv(t), this.got(t).on("redirect", (t, e) => { try { if (t.headers["set-cookie"]) { const s = t.headers["set-cookie"].map(this.cktough.Cookie.parse).toString(); s && this.ckjar.setCookieSync(s, null), e.cookieJar = this.ckjar } } catch (t) { this.logErr(t) } }).then(t => { const { statusCode: s, statusCode: i, headers: r, body: o } = t; e(null, { status: s, statusCode: i, headers: r, body: o }, o) }, t => { const { message: s, response: i } = t; e(s, i, i && i.body) })) } post (t, e = (() => { })) { if (t.body && t.headers && !t.headers["Content-Type"] && (t.headers["Content-Type"] = "application/x-www-form-urlencoded"), t.headers && delete t.headers["Content-Length"], this.isSurge() || this.isLoon()) this.isSurge() && this.isNeedRewrite && (t.headers = t.headers || {}, Object.assign(t.headers, { "X-Surge-Skip-Scripting": !1 })), $httpClient.post(t, (t, s, i) => { !t && s && (s.body = i, s.statusCode = s.status), e(t, s, i) }); else if (this.isQuanX()) t.method = "POST", this.isNeedRewrite && (t.opts = t.opts || {}, Object.assign(t.opts, { hints: !1 })), $task.fetch(t).then(t => { const { statusCode: s, statusCode: i, headers: r, body: o } = t; e(null, { status: s, statusCode: i, headers: r, body: o }, o) }, t => e(t)); else if (this.isNode()) { this.initGotEnv(t); const { url: s, ...i } = t; this.got.post(s, i).then(t => { const { statusCode: s, statusCode: i, headers: r, body: o } = t; e(null, { status: s, statusCode: i, headers: r, body: o }, o) }, t => { const { message: s, response: i } = t; e(s, i, i && i.body) }) } } time (t, e = null) { const s = e ? new Date(e) : new Date; let i = { "M+": s.getMonth() + 1, "d+": s.getDate(), "H+": s.getHours(), "m+": s.getMinutes(), "s+": s.getSeconds(), "q+": Math.floor((s.getMonth() + 3) / 3), S: s.getMilliseconds() }; /(y+)/.test(t) && (t = t.replace(RegExp.$1, (s.getFullYear() + "").substr(4 - RegExp.$1.length))); for (let e in i) new RegExp("(" + e + ")").test(t) && (t = t.replace(RegExp.$1, 1 == RegExp.$1.length ? i[e] : ("00" + i[e]).substr(("" + i[e]).length))); return t } msg (e = t, s = "", i = "", r) { const o = t => { if (!t) return t; if ("string" == typeof t) return this.isLoon() ? t : this.isQuanX() ? { "open-url": t } : this.isSurge() ? { url: t } : void 0; if ("object" == typeof t) { if (this.isLoon()) { let e = t.openUrl || t.url || t["open-url"], s = t.mediaUrl || t["media-url"]; return { openUrl: e, mediaUrl: s } } if (this.isQuanX()) { let e = t["open-url"] || t.url || t.openUrl, s = t["media-url"] || t.mediaUrl; return { "open-url": e, "media-url": s } } if (this.isSurge()) { let e = t.url || t.openUrl || t["open-url"]; return { url: e } } } }; if (this.isMute || (this.isSurge() || this.isLoon() ? $notification.post(e, s, i, o(r)) : this.isQuanX() && $notify(e, s, i, o(r))), !this.isMuteLog) { let t = ["", "==============📣系统通知📣=============="]; t.push(e), s && t.push(s), i && t.push(i), console.log(t.join("\n")), this.logs = this.logs.concat(t) } } log (...t) { t.length > 0 && (this.logs = [...this.logs, ...t]), console.log(t.join(this.logSeparator)) } logErr (t, e) { const s = !this.isSurge() && !this.isQuanX() && !this.isLoon(); s ? this.log("", `❗️${this.name}, 错误!`, t.stack) : this.log("", `❗️${this.name}, 错误!`, t) } wait (t) { return new Promise(e => setTimeout(e, t)) } done (t = {}) { const e = (new Date).getTime(), s = (e - this.startTime) / 1e3; this.log("", `🔔${this.name}, 结束! 🕛 ${s} 秒`), this.log(), (this.isSurge() || this.isQuanX() || this.isLoon()) && $done(t) } }(t, e) }